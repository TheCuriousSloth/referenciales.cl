generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("POSTGRES_PRISMA_URL")
  extensions = [postgis]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  id                String   @id
  User              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model AuditLog {
  id        String   @id
  userId    String
  action    String
  metadata  Json?
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
}

model ChatMessage {
  id        String      @id
  userId    String
  role      MessageRole
  content   String
  createdAt DateTime    @default(now())
  User      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id
  name          String?
  email         String          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  role          Role            @default(user)
  Account       Account[]
  AuditLog      AuditLog[]
  ChatMessage   ChatMessage[]
  Session       Session[]
  referenciales referenciales[]
}

model VerificationToken {
  identifier String   @unique
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model conservadores {
  id            String          @id
  nombre        String
  direccion     String
  comuna        String
  region        String
  telefono      String?
  email         String?
  sitioWeb      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  referenciales referenciales[]
}

model referenciales {
  id             String                   @id
  lat            Float
  lng            Float
  fojas          String
  numero         Int
  anio           Int
  cbr            String
  comprador      String
  vendedor       String
  predio         String
  comuna         String
  rol            String
  fechaescritura DateTime
  superficie     Float
  monto          BigInt?
  observaciones  String?
  userId         String
  conservadorId  String
  geom           Unsupported("geometry")?
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  conservadores  conservadores            @relation(fields: [conservadorId], references: [id])
  User           User                     @relation(fields: [userId], references: [id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

enum MessageRole {
  user
  bot
}

enum Role {
  user
  admin
  superadmin
}
